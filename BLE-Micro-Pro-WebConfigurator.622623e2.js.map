{"version":3,"sources":["src/webSerial.ts","node_modules/crc-32/crc32.js","src/dfu.ts","src/keyboards.js","index.js"],"names":["CRC32","factory","DO_NOT_EXPORT_CRC","exports","define","amd","module","version","T","signed_crc_table","c","table","Array","n","Int32Array","bstr","crc32_bstr","seed","C","L","length","i","charCodeAt","buf","crc32_buf","crc32_buf_8","str","crc32_str","d","keyboards","name","layout","keymap","split","lpme","Elm","require","app","App","init","node","document","getElementById","flags","revision","webSerialEnabled","navigator","serial","bootloaders","applications","WebSerial","serialReceivedStr","sleep","ms","Promise","resolve","setTimeout","notifyUpdateResult","progress","message","ports","updateResult","send","notifyUpdateProgress","notifyBootloaderWakeup","notifyUpdateError","sendConfig","configString","writeString","index","slice","Math","floor","includes","reject","Error","updateFirmware","subscribe","dfu","DfuBootloader","console","log","command","connected","close","e","open","error","startReadLoop","firmName","type","disableMsc","replace","dat","fetch","bin","ok","is_dfu","checkIntegrity","initPacket","arrayBuffer","sendInitpacket","Uint8Array","firmImage","sendFirmware","updateConfig","json","setup","uploaded","configName","keyboard","useLpme","isSplit","isLeft","file","config","mode","isSlave","matrix","debounce","is_left_hand","peripheral","max_interval","periphInterval","min_interval","slave_latency","central","centralInterval","locale","isJis","reserved","fill","autoSleep","setReceiveCallback","array","receivedPacket","String","fromCharCode","apply","JSON","stringify"],"mappings":"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","file":"BLE-Micro-Pro-WebConfigurator.622623e2.js","sourceRoot":"..","sourcesContent":["class WebSerial {\n  private receiveCallback: ((msg: Uint8Array) => void) | null = null;\n  private closeCallback: (() => void) | null = null;\n  private errorCallback: ((e: Error) => void) | null = null;\n\n  private port: SerialPort | null = null;\n  private writable: WritableStream | null = null;\n  private reader: ReadableStreamDefaultReader | null = null;\n\n  private _connected: boolean = false;\n  private _readloopRunning: boolean = false;\n  get connected() {\n    return this._connected;\n  }\n\n  constructor(\n    private send_chunk: number = 64,\n    private send_interval: number = 30\n  ) {}\n\n  setReceiveCallback(recvHandler: ((msg: Uint8Array) => void) | null) {\n    this.receiveCallback = recvHandler;\n  }\n  setErrorCallback(handler: (e: Error) => void | null) {\n    this.errorCallback = handler;\n  }\n  setCloseCallback(handler: () => void | null) {\n    this.errorCallback = handler;\n  }\n\n  async open(onConnect: () => void | null) {\n    this.port = await navigator.serial.requestPort();\n\n    try {\n      await this.port.open({ baudrate: 115200, buffersize: 81920 });\n    } catch (e) {\n      await this.port.close();\n      return Promise.reject(e);\n    }\n\n    this._connected = true;\n    this._readloopRunning = false;\n\n    if (onConnect) {\n      onConnect();\n    }\n\n    // this.readLoop();\n\n    this.writable = this.port.writable;\n    console.log(\"open serial port\");\n  }\n\n  async startReadLoop() {\n    this.readLoop();\n    await this.sleep(1000);\n  }\n\n  private async readLoop() {\n    if (this.port == null) {\n      console.error(\"failed to read from serial port\");\n      return;\n    }\n\n    try {\n      this.reader = this.port.readable.getReader();\n      console.log(\"start read loop\");\n      for (;;) {\n        const { done, value } = await this.reader.read();\n\n        if (value) {\n          console.log(`serial received: ${value.byteLength}byte`);\n\n          if (this.receiveCallback) {\n            this.receiveCallback(value);\n          }\n        }\n\n        if (done) {\n          console.log(\"Web serial read complete\", done);\n          if (this.reader) {\n            this.reader.releaseLock();\n          }\n\n          this._readloopRunning = false;\n\n          break;\n        }\n      }\n    } catch (e) {\n      this._readloopRunning = false;\n      console.error(e);\n      if (this.errorCallback) {\n        this.errorCallback(e);\n      }\n\n      await this.close();\n    }\n  }\n\n  private sleep(ms: number) {\n    return new Promise((resolve: any) => setTimeout(resolve, ms));\n  }\n\n  async writeString(msg: string) {\n    await this.write(new TextEncoder().encode(msg));\n  }\n\n  async write(msg: Uint8Array) {\n    if (this.writable == null) {\n      return;\n    }\n\n    const writer = this.writable.getWriter();\n\n    for (let index = 0; index < msg.length; index += this.send_chunk) {\n      // console.log(\"serial send:\", msg.slice(index, index + this.send_chunk));\n      await writer.write(msg.slice(index, index + this.send_chunk));\n      await this.sleep(this.send_interval);\n    }\n\n    writer.releaseLock();\n  }\n\n  async close() {\n    if (this.reader) {\n      try {\n        await this.reader.cancel();\n        this.reader.releaseLock();\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.reader = null;\n      }\n    }\n\n    if (this.writable) {\n      // this.writable.abort();\n      this.writable = null;\n    }\n\n    if (this.closeCallback) {\n      this.closeCallback();\n    }\n\n    if (this.port) {\n      try {\n        await this.port.close();\n        this.port = null;\n        this._connected = false;\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    console.log(\"serial port closed\");\n  }\n}\n\nexport { WebSerial };\n","/* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported CRC32 */\nvar CRC32;\n(function (factory) {\n\t/*jshint ignore:start */\n\t/*eslint-disable */\n\tif(typeof DO_NOT_EXPORT_CRC === 'undefined') {\n\t\tif('object' === typeof exports) {\n\t\t\tfactory(exports);\n\t\t} else if ('function' === typeof define && define.amd) {\n\t\t\tdefine(function () {\n\t\t\t\tvar module = {};\n\t\t\t\tfactory(module);\n\t\t\t\treturn module;\n\t\t\t});\n\t\t} else {\n\t\t\tfactory(CRC32 = {});\n\t\t}\n\t} else {\n\t\tfactory(CRC32 = {});\n\t}\n\t/*eslint-enable */\n\t/*jshint ignore:end */\n}(function(CRC32) {\nCRC32.version = '1.2.0';\n/* see perf/crc32table.js */\n/*global Int32Array */\nfunction signed_crc_table() {\n\tvar c = 0, table = new Array(256);\n\n\tfor(var n =0; n != 256; ++n){\n\t\tc = n;\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\ttable[n] = c;\n\t}\n\n\treturn typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n}\n\nvar T = signed_crc_table();\nfunction crc32_bstr(bstr, seed) {\n\tvar C = seed ^ -1, L = bstr.length - 1;\n\tfor(var i = 0; i < L;) {\n\t\tC = (C>>>8) ^ T[(C^bstr.charCodeAt(i++))&0xFF];\n\t\tC = (C>>>8) ^ T[(C^bstr.charCodeAt(i++))&0xFF];\n\t}\n\tif(i === L) C = (C>>>8) ^ T[(C ^ bstr.charCodeAt(i))&0xFF];\n\treturn C ^ -1;\n}\n\nfunction crc32_buf(buf, seed) {\n\tif(buf.length > 10000) return crc32_buf_8(buf, seed);\n\tvar C = seed ^ -1, L = buf.length - 3;\n\tfor(var i = 0; i < L;) {\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t}\n\twhile(i < L+3) C = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\treturn C ^ -1;\n}\n\nfunction crc32_buf_8(buf, seed) {\n\tvar C = seed ^ -1, L = buf.length - 7;\n\tfor(var i = 0; i < L;) {\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t}\n\twhile(i < L+7) C = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\treturn C ^ -1;\n}\n\nfunction crc32_str(str, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L=str.length, c, d; i < L;) {\n\t\tc = str.charCodeAt(i++);\n\t\tif(c < 0x80) {\n\t\t\tC = (C>>>8) ^ T[(C ^ c)&0xFF];\n\t\t} else if(c < 0x800) {\n\t\t\tC = (C>>>8) ^ T[(C ^ (192|((c>>6)&31)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|(c&63)))&0xFF];\n\t\t} else if(c >= 0xD800 && c < 0xE000) {\n\t\t\tc = (c&1023)+64; d = str.charCodeAt(i++)&1023;\n\t\t\tC = (C>>>8) ^ T[(C ^ (240|((c>>8)&7)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|((c>>2)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|(d&63)))&0xFF];\n\t\t} else {\n\t\t\tC = (C>>>8) ^ T[(C ^ (224|((c>>12)&15)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|((c>>6)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|(c&63)))&0xFF];\n\t\t}\n\t}\n\treturn C ^ -1;\n}\nCRC32.table = T;\n// $FlowIgnore\nCRC32.bstr = crc32_bstr;\n// $FlowIgnore\nCRC32.buf = crc32_buf;\n// $FlowIgnore\nCRC32.str = crc32_str;\n}));\n","import { WebSerial } from \"./webSerial\";\nimport CRC32 from \"crc-32\";\n\nconst MAX_RAW_DATA: number = 1024;\nconst MAX_SLIP_DATA: number = 2051;\n\nenum SlipDecodeState {\n  Decoding,\n  EscReceived,\n  ClearingInvalidPacket,\n}\n\nclass Slip {\n  static readonly END: number = 0xc0;\n  static readonly ESC: number = 0xdb;\n  static readonly ESC_END: number = 0xdc;\n  static readonly ESC_ESC: number = 0xdd;\n\n  decode_state: SlipDecodeState;\n  decoded_data: number[] = [];\n\n  constructor() {\n    this.decode_state = SlipDecodeState.Decoding;\n  }\n\n  encode(bytes: Uint8Array): Uint8Array {\n    let encode_bytes = new Uint8Array(MAX_SLIP_DATA);\n    let idx = 0;\n    for (const byte of bytes) {\n      if (byte == Slip.END) {\n        encode_bytes[idx] = Slip.ESC;\n        encode_bytes[idx + 1] = Slip.ESC_END;\n        idx += 2;\n      } else if (byte == Slip.ESC) {\n        encode_bytes[idx] = Slip.ESC;\n        encode_bytes[idx + 1] = Slip.ESC_ESC;\n        idx += 2;\n      } else {\n        encode_bytes[idx] = byte;\n        idx += 1;\n      }\n    }\n    encode_bytes[idx] = Slip.END;\n    idx += 1;\n\n    return encode_bytes.slice(0, idx);\n  }\n\n  decode_byte(byte: number): [boolean, SlipDecodeState, number[]] {\n    let finished: boolean = false;\n    if (byte > 0xff || byte < 0) {\n      console.log(\"invalid argument\");\n      return [false, this.decode_state, this.decoded_data];\n    }\n\n    switch (this.decode_state) {\n      case SlipDecodeState.Decoding:\n        if (byte == Slip.END) {\n          finished = true;\n        } else if (byte == Slip.ESC) {\n          this.decode_state = SlipDecodeState.EscReceived;\n        } else {\n          this.decoded_data.push(byte);\n        }\n        break;\n      case SlipDecodeState.EscReceived:\n        if (byte == Slip.ESC_END) {\n          this.decoded_data.push(Slip.END);\n          this.decode_state = SlipDecodeState.Decoding;\n        } else if (byte == Slip.ESC_ESC) {\n          this.decoded_data.push(Slip.ESC);\n          this.decode_state = SlipDecodeState.Decoding;\n        } else {\n          this.decode_state = SlipDecodeState.ClearingInvalidPacket;\n        }\n        break;\n      case SlipDecodeState.ClearingInvalidPacket:\n        if (byte == Slip.END) {\n          this.decode_state = SlipDecodeState.Decoding;\n        }\n        break;\n    }\n\n    if (finished) {\n      let res = this.decoded_data.slice();\n      this.decoded_data = [];\n      return [finished, this.decode_state, res];\n    }\n\n    return [finished, this.decode_state, this.decoded_data];\n  }\n}\n\nenum OPCODE {\n  VERSION = 0x00,\n  CREATE = 0x01,\n  SRN = 0x02,\n  CRC = 0x03,\n  EXECUTE = 0x04,\n  SELECT = 0x06,\n  MTU = 0x07,\n  WRITE = 0x08,\n  PING = 0x09,\n  HW_VER = 0x0a,\n  SW_VER = 0x0b,\n  ABORT = 0x0c,\n  RESPONSE = 0x60,\n}\n\nenum RES_CODE {\n  INVALID_CODE = 0x00,\n  SUCCESS = 0x01,\n  NOTSUPPORTED = 0x02,\n  INVALID_PARAMETER = 0x03,\n  INSUFFICIENT_RESOURCES = 0x04,\n  INVALID_OBJECT = 0x05,\n  INVALID_SIGNATURE = 0x06,\n  UNSUPPORTED_TYPE = 0x07,\n  OPERATION_NOTPERMITTED = 0x08,\n  OPERATION_FAILED = 0x0a,\n  EXTENDED_ERROR = 0x0b,\n}\ntype ObjectResponse = { max_size: number; offset: number; crc: number };\n\nclass DfuBootloader {\n  slip = new Slip();\n\n  private received: boolean = false;\n  private sending_opcode: OPCODE | null = null;\n  private command_result: { success: boolean; data: number[] } = {\n    success: false,\n    data: [],\n  };\n\n  private sleep(ms: number) {\n    return new Promise((resolve: any) => setTimeout(resolve, ms));\n  }\n\n  async waitReceive() {\n    while (this.received == false) {\n      await this.sleep(1);\n    }\n\n    if (this.received == true) {\n      if (this.command_result.success) {\n        this.received = false;\n      } else {\n        this.received = false;\n        throw new Error(\"Failed to receive command response.\");\n      }\n    }\n  }\n\n  async getProtocolVersion(): Promise<number> {\n    this.sending_opcode = OPCODE.VERSION;\n    await this.send(new Uint8Array([this.sending_opcode]));\n    await this.waitReceive();\n\n    if (this.command_result) {\n      return this.command_result.data[0];\n    } else {\n      console.error(\"Get Protocol Ver:Failed\");\n      return Promise.reject();\n    }\n  }\n\n  async setPacketReceiptNotification(prn: number) {\n    this.sending_opcode = OPCODE.SRN;\n    await this.send(new Uint8Array([this.sending_opcode, prn]));\n    await this.waitReceive();\n\n    if (!this.command_result.success) {\n      return Promise.reject(\"Failed to set Packet Receipt Notification.\");\n    }\n  }\n\n  async getMtu(): Promise<number> {\n    this.sending_opcode = OPCODE.MTU;\n    await this.send(new Uint8Array([this.sending_opcode]));\n    await this.waitReceive();\n\n    let data = new Uint8Array(this.command_result.data);\n    let u16data = new Uint16Array(data.buffer);\n\n    if (this.command_result.success) {\n      return u16data[0];\n    } else {\n      console.error(\"Get mtu:Failed\");\n      return Promise.reject(new Error(\"Failed to get MTU\"));\n    }\n  }\n\n  private async createObject(type: 1 | 2, size: number) {\n    this.sending_opcode = OPCODE.CREATE;\n\n    await this.send(\n      new Uint8Array([\n        this.sending_opcode,\n        type,\n        size & 0xff,\n        (size >> 8) & 0xff,\n        (size >> 16) & 0xff,\n        (size >> 24) & 0xff,\n      ])\n    );\n    await this.waitReceive();\n\n    if (!this.command_result.success) {\n      return Promise.reject(new Error(\"Failed to create Object\"));\n    }\n  }\n  private async createCommand(size: number) {\n    return this.createObject(1, size);\n  }\n  private async createData(size: number) {\n    return this.createObject(2, size);\n  }\n  private async selectObject(type: 1 | 2): Promise<ObjectResponse> {\n    this.sending_opcode = OPCODE.SELECT;\n\n    await this.send(new Uint8Array([this.sending_opcode, type]));\n    await this.waitReceive();\n\n    let data = new Uint8Array(this.command_result.data);\n    let i32data = new Int32Array(data.buffer);\n\n    return new Promise((resolve, reject) => {\n      if (this.command_result.success) {\n        let response: ObjectResponse = {\n          max_size: i32data[0],\n          offset: i32data[1],\n          crc: i32data[2],\n        };\n        console.log(\"select object:\", response);\n        resolve(response);\n      } else {\n        reject();\n      }\n    });\n  }\n\n  private async selectCommand(): Promise<ObjectResponse> {\n    return this.selectObject(1);\n  }\n\n  private async selectData(): Promise<ObjectResponse> {\n    return this.selectObject(2);\n  }\n\n  private async requestChecksum(): Promise<ObjectResponse | null> {\n    this.sending_opcode = OPCODE.CRC;\n\n    await this.send(new Uint8Array([this.sending_opcode]));\n    await this.waitReceive();\n\n    if (this.command_result.success) {\n      let data = new Uint8Array(this.command_result.data);\n      let i32data = new Int32Array(data.buffer);\n\n      return new Promise((resolve) => {\n        resolve({ max_size: 0, offset: i32data[0], crc: i32data[1] });\n      });\n    } else {\n      return new Promise((resolve) => {\n        resolve(null);\n      });\n    }\n  }\n\n  private async requestExecute(): Promise<void> {\n    this.sending_opcode = OPCODE.EXECUTE;\n\n    await this.send(new Uint8Array([this.sending_opcode]));\n    await this.waitReceive();\n\n    return new Promise((resolve, reject) => {\n      if (this.command_result.success) {\n        resolve();\n      } else {\n        reject();\n      }\n    });\n  }\n\n  private async streamData(\n    data: Uint8Array,\n    crc: number,\n    offset: number\n  ): Promise<number> {\n    let idx = 0;\n    let len = data.length;\n    let transmit_data: Uint8Array;\n\n    for (idx = 0; idx < len; idx += MAX_RAW_DATA) {\n      transmit_data = data.slice(idx, idx + MAX_RAW_DATA);\n      let send_packet = new Uint8Array(1 + transmit_data.length);\n      this.sending_opcode = OPCODE.WRITE;\n      send_packet.set([OPCODE.WRITE]);\n      send_packet.set(transmit_data, 1);\n      await this.send(send_packet);\n\n      crc = CRC32.buf(transmit_data, crc);\n      offset += transmit_data.length;\n\n      // await this.waitReceive();\n    }\n\n    let crc_response = await this.requestChecksum();\n    if (!crc_response) {\n      return Promise.reject(new Error(\"Failed to get checksum.\"));\n    }\n    console.log(\"crc_response\", crc_response);\n\n    if (crc != crc_response.crc) {\n      console.error(\n        `CRC Error: Expect: 0x${crc.toString(\n          16\n        )}, Received: 0x${crc_response.crc.toString(16)}`\n      );\n      return Promise.reject(new Error(\"CRC Error.\"));\n    }\n\n    if (offset != crc_response.offset) {\n      return Promise.reject(new Error(\"Offset error. Packet lossed.\"));\n    }\n\n    return crc;\n  }\n\n  private decodeReceivePacket(msg: Uint8Array): [boolean, number[] | null] {\n    let decoded: number[];\n    let done: boolean = false;\n    let decode_state: SlipDecodeState = SlipDecodeState.Decoding;\n    for (const byte of msg) {\n      [done, decode_state, decoded] = this.slip.decode_byte(byte);\n      if (done) {\n        console.log(\"SLIP packet decoded\");\n        return [true, decoded];\n      }\n\n      if (decode_state == SlipDecodeState.ClearingInvalidPacket) {\n        console.log(\"Invalid SLIP packet\");\n        return [true, null];\n      }\n    }\n\n    return [false, null];\n  }\n\n  private onReceivePacket(msg: Uint8Array) {\n    let [done, decoded] = this.decodeReceivePacket(msg);\n\n    if (done) {\n      if (decoded) {\n        this.messageParaser(decoded.slice());\n        this.received = true;\n      } else {\n        // invalid packet\n      }\n    }\n  }\n\n  private messageParaser(msg: number[]) {\n    this.command_result.success = false;\n    this.command_result.data = [];\n\n    if (msg[0] != OPCODE.RESPONSE) {\n      // error\n      console.error(\"invalid response: not response packet\");\n    }\n\n    if (msg[1] != this.sending_opcode) {\n      // error\n      console.error(\n        `invalid response: different opcode. expect ${this.sending_opcode}, received ${msg[1]}`\n      );\n    }\n\n    if (msg[2] == RES_CODE.SUCCESS) {\n      console.log(\"dfu command successed\", this.sending_opcode);\n      this.command_result.success = true;\n      this.command_result.data = msg.slice(3);\n    } else if (msg[2] == RES_CODE.EXTENDED_ERROR) {\n      console.error(\"extend error:\", msg[3]);\n    } else {\n      // error\n      console.error(\"invalid response: oeperation failed:\", msg[2]);\n    }\n  }\n\n  constructor(private serial: WebSerial) {\n    serial.setReceiveCallback(this.onReceivePacket.bind(this));\n  }\n\n  async checkIntegrity(): Promise<boolean> {\n    await this.setPacketReceiptNotification(0);\n    let mtu = await this.getMtu();\n    if (mtu != MAX_SLIP_DATA) {\n      console.error(`Wrong MTU:${mtu} Expected:${MAX_SLIP_DATA}`);\n      return false;\n    }\n    return true;\n  }\n\n  async send(msg: Uint8Array) {\n    let packet = this.slip.encode(msg);\n    console.log(`serial send ${packet.byteLength}byte`);\n    if (!this.serial.connected) {\n      return Promise.reject(new Error(\"Serial port is not opend.\"));\n    }\n    await this.serial.write(packet);\n  }\n\n  async sendInitpacket(packet: Uint8Array) {\n    let tryToResume = async (response: ObjectResponse) => {\n      console.log(\"try to resume init packet\");\n      if (response.offset == 0 || response.offset > packet.length) {\n        console.log(\"Nothing to resume\");\n        return false;\n      }\n\n      let expexted_crc = CRC32.buf(packet.slice(0, response.offset));\n\n      if (expexted_crc != response.crc) {\n        console.log(\"invalid crc\");\n        return false;\n      }\n\n      if (packet.length > response.offset) {\n        console.log(\"resume init packet\");\n        await this.streamData(\n          packet.slice(response.offset),\n          expexted_crc,\n          response.offset\n        );\n      }\n\n      await this.requestExecute();\n\n      return true;\n    };\n\n    let response: ObjectResponse = Object.assign(\n      {},\n      await this.selectCommand()\n    );\n    console.log(\"Select Command:\", response);\n\n    if (!response) {\n      return Promise.reject(new Error(\"Invalid response.\"));\n    }\n\n    if (response.max_size < packet.length) {\n      return Promise.reject(new Error(\"Too long init packet.\"));\n    }\n\n    if (response && (await tryToResume(response))) {\n      // scccess\n      return;\n    }\n\n    console.log(\"send intial packet from head\");\n    await this.createCommand(packet.length);\n    await this.streamData(packet, 0, 0);\n    await this.requestExecute();\n  }\n\n  async sendFirmware(\n    firm: Uint8Array,\n    onProgress?: (progress: number) => void\n  ) {\n    let tryToResume = async (response: ObjectResponse) => {\n      console.log(\"try to resume firmware packet\");\n      if (response.offset == 0) {\n        console.log(\"Nothing to resume\");\n        return false;\n      }\n\n      let expexted_crc = CRC32.buf(firm.slice(0, response.offset));\n      let emptyBytesInPage = response.offset % response.max_size;\n\n      if (expexted_crc != response.crc) {\n        console.log(\"invalid crc\");\n        response.offset -= emptyBytesInPage\n          ? emptyBytesInPage\n          : response.max_size;\n        response.crc = CRC32.buf(firm.slice(0, response.offset));\n        return false;\n      }\n\n      if (emptyBytesInPage != 0 && response.offset != firm.length) {\n        console.log(\"resume firmware image\");\n        console.log(\"send a chunk of firmware image\");\n\n        let transmit_data = firm.slice(\n          response.offset,\n          response.offset + response.max_size - emptyBytesInPage\n        );\n        response.crc = await this.streamData(\n          transmit_data,\n          response.crc,\n          response.offset\n        );\n      }\n\n      await this.requestExecute();\n\n      return false;\n    };\n\n    let response = Object.assign({}, await this.selectData());\n\n    if (!response) {\n      return Promise.reject(new Error(\"Invalid response.\"));\n    }\n\n    console.log(\"Select Data:\", response);\n\n    // if (response.max_size > MAX_RAW_DATA) {\n    //   Promise.reject(\n    //     new Error(`Invalid Max data size:${response.max_size}>${MAX_RAW_DATA}`)\n    //   );\n    // }\n\n    // send first chunk\n    await tryToResume(response);\n\n    let idx: number = response.offset;\n    let len: number = firm.length;\n    console.log(`write ${len} bytes, strat from ${idx}`);\n    for (idx; idx < len; idx += response.max_size) {\n      console.log(\n        `send a chunk of firmware image [${idx}:${\n          idx + response.max_size\n        }]/${len} => ${Math.floor((idx / len) * 100)}%`\n      );\n      let transmit_data = firm.slice(idx, idx + response.max_size);\n\n      await this.createData(transmit_data.length);\n      response.crc = await this.streamData(transmit_data, response.crc, idx);\n      await this.requestExecute();\n      if (onProgress) {\n        onProgress(Math.floor((idx / len) * 100));\n      }\n    }\n    if (onProgress) {\n      onProgress(Math.floor((idx / len) * 100));\n    }\n  }\n}\n\n// let dfu = new DfuBootloader();\n\n// window.getBootloaderVersion = function getBootloaderVersion() {\n//     dfu.getVersion();\n// };\n\n// async function loadFirmwareImage(firmName) {\n//     let file = await fetch(firmName)\n//         .then((response) => {\n//             return response.arrayBuffer();\n//         })\n//         .then((array) => {\n//             console.log(array);\n//             return array;\n//         });\n//\n//     return file;\n// }\n\nexport { DfuBootloader };\n","export { keyboards };\nlet keyboards = [\n  { name: \"7skb\", layout: [\"rev1\"], keymap: [], split: true, lpme: true },\n  { name: \"angel64\", layout: [\"rev1\"], keymap: [], split: false, lpme: false },\n  { name: \"bat43\", layout: [\"\"], keymap: [], split: false, lpme: false },\n  {\n    name: \"ble_micro_pro\",\n    layout: [\"\"],\n    keymap: [],\n    split: false,\n    lpme: false,\n  },\n  {\n    name: \"ble_micro_pro_split\",\n    layout: [\"\"],\n    keymap: [],\n    split: true,\n    lpme: true,\n  },\n  { name: \"choco60\", layout: [\"\"], keymap: [], split: true, lpme: true },\n  { name: \"claw44\", layout: [\"rev1\"], keymap: [], split: true, lpme: true },\n  { name: \"cocoa40\", layout: [\"\"], keymap: [], split: true, lpme: true },\n  { name: \"crkbd\", layout: [\"rev1\"], keymap: [], split: true, lpme: true },\n  { name: \"dozen0\", layout: [\"\"], keymap: [], split: false, lpme: false },\n  {\n    name: \"ergo42\",\n    layout: [\"rev1_layout_ortho_4x14\"],\n    keymap: [],\n    split: true,\n    lpme: true,\n  },\n  {\n    name: \"ergodash\",\n    layout: [\n      \"rev1_layout_2key\",\n      \"rev1_layout_3key_1us\",\n      \"rev1_layout_3key_2us\",\n      \"rev1_layout_4key\",\n      \"rev1_layout_4key_2u_inner\",\n    ],\n    keymap: [],\n    split: true,\n    lpme: true,\n  },\n  { name: \"ergodash_mini\", layout: [\"\"], keymap: [], split: true, lpme: true },\n  { name: \"helix\", layout: [\"5row\"], keymap: [], split: true, lpme: true },\n  { name: \"kugel\", layout: [\"\"], keymap: [], split: false, lpme: false },\n  {\n    name: \"lets_split\",\n    layout: [\"rev2\"],\n    keymap: [],\n    split: true,\n    lpme: false,\n  },\n  { name: \"lily58\", layout: [\"rev1\"], keymap: [], split: true, lpme: true },\n  { name: \"mint60\", layout: [\"\"], keymap: [], split: true, lpme: true },\n  { name: \"naked48\", layout: [\"rev1\"], keymap: [], split: false, lpme: false },\n  { name: \"naked60\", layout: [\"rev1\"], keymap: [], split: false, lpme: false },\n  { name: \"naked64\", layout: [\"rev1\"], keymap: [], split: false, lpme: false },\n  { name: \"nomu30\", layout: [\"\"], keymap: [], split: false, lpme: false },\n  { name: \"numatreus\", layout: [\"\"], keymap: [], split: false, lpme: false },\n  {\n    name: \"otaku_split\",\n    layout: [\"rev1\"],\n    keymap: [],\n    split: true,\n    lpme: true,\n  },\n  {\n    name: \"runner3680\",\n    layout: [\"3x6\", \"3x7\", \"3x8\", \"4x6\", \"4x7\", \"4x8\", \"5x6\", \"5x7\", \"5x8\"],\n    keymap: [],\n    split: true,\n    lpme: false,\n  },\n  { name: \"toybox\", layout: [\"\"], keymap: [], split: true, lpme: false },\n  {\n    name: \"toybox_single\",\n    layout: [\"\"],\n    keymap: [],\n    split: false,\n    lpme: false,\n  },\n  { name: \"treadstone48\", layout: [\"\"], keymap: [], split: false, lpme: false },\n  { name: \"uzu42\", layout: [\"rev1\"], keymap: [], split: true, lpme: true },\n  { name: \"zinc\", layout: [\"rev1\"], keymap: [], split: true, lpme: true },\n];\n","import { WebSerial } from \"./src/webSerial\";\nimport { DfuBootloader } from \"./src/dfu\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { keyboards } from \"./src/keyboards\";\n\nconst { Elm } = require(\"./src/App.elm\");\n\nconst app = Elm.App.init({\n  node: document.getElementById(\"main\"),\n  flags: {\n    revision: process.env.REVISION,\n    webSerialEnabled: navigator.serial ? true : false,\n    keyboards: keyboards,\n    bootloaders: [\n      \"ble_micro_pro_bootloader_0_7_0\",\n      \"ble_micro_pro_bootloader_0_6_0\",\n      \"ble_micro_pro_bootloader_0_5_1\",\n      \"ble_micro_pro_bootloader_0_5_0\"\n    ],\n    applications: [\n      \"ble_micro_pro_default_0_7_0\",\n      \"kugel_default_0_7_0\",\n      \"toybox_bmp_default_0_7_0\",\n      \"ble_micro_pro_default_0_6_0\",\n      \"ble_micro_pro_default_0_5_2\",\n      \"ble_micro_pro_default_0_5_1\",\n      \"ble_micro_pro_default_0_5_0\",\n      \"kugel_default_0_6_0\",\n      \"kugel_default_0_5_1\",\n      \"kugel_default_0_5_0\",\n    ]\n  }\n});\n\nconst serial = new WebSerial(128, 5);\nlet serialReceivedStr = \"\";\n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nfunction notifyUpdateResult(progress, message) {\n  app.ports.updateResult.send({ progress: progress, message: message });\n}\n\nfunction notifyUpdateProgress(progress) {\n  notifyUpdateResult(progress, \"\");\n}\n\nfunction notifyBootloaderWakeup() {\n  notifyUpdateResult(-1, \"\");\n}\n\nfunction notifyUpdateError(message) {\n  notifyUpdateResult(-2, message);\n}\n\napp.ports.updateFirmware.subscribe(async (command) => {\n  const dfu = new DfuBootloader(serial);\n  console.log(command);\n\n  if (serial.connected) {\n    try {\n      console.log(\"close previous port\");\n      await serial.close();\n    } catch (e) {}\n  }\n\n  try {\n    await serial.open();\n  } catch (e) {\n    console.error(e);\n    notifyUpdateError(e.message);\n    return;\n  }\n  serial.startReadLoop();\n\n  let firmName = `${command.type}/${command.name}`;\n\n  if (command.type == \"application\" && command.disableMsc == true) {\n    firmName = firmName.replace(\"default\", \"no_msc\");\n  } else if (command.type == \"bootloader\" && command.disableMsc == true) {\n    firmName = firmName + \"_no_msc\";\n  }\n\n  const dat = await fetch(`${firmName}.dat`);\n  const bin = await fetch(`${firmName}.bin`);\n\n  if (!(dat.ok && bin.ok)) {\n    console.error(\"failed to load file\");\n    notifyUpdateError(`File ${firmName} not found.`);\n    return;\n  }\n\n  console.log(\"target firmware is found\");\n\n  let is_dfu = false;\n  try {\n    await serial.writeString(\"\\x03\\ndfu\\n\\xc0\");\n  } catch (e) {\n    console.error(e);\n\n    notifyUpdateError(e.message);\n\n    return;\n  }\n\n  await sleep(100);\n\n  try {\n    is_dfu = await dfu.checkIntegrity();\n    if (!is_dfu) {\n      console.error(\"dfu not found\");\n      return;\n    }\n  } catch (e) {\n    console.error(e);\n    notifyBootloaderWakeup();\n    return;\n  }\n\n  console.log(\"dfu found\");\n\n  try {\n    const initPacket = await dat.arrayBuffer();\n    await dfu.sendInitpacket(new Uint8Array(initPacket));\n\n    const firmImage = await bin.arrayBuffer();\n    await dfu.sendFirmware(new Uint8Array(firmImage), (progress) => {\n      notifyUpdateProgress(progress);\n    });\n  } catch (e) {\n    console.error(e);\n    notifyUpdateError(e.message);\n\n    return;\n  }\n\n  console.log(\"update completed\");\n  await serial.close();\n});\n\napp.ports.updateConfig.subscribe(async (setup) => {\n  console.log(setup);\n\n  let json;\n  if (!setup.uploaded) {\n    try {\n      let configName = `config/${setup.keyboard}/${setup.keyboard}`;\n\n      if (setup.layout != \"\") {\n        configName += `_${setup.layout}`;\n      }\n\n      if (setup.useLpme) {\n        configName += \"_lpme_left_config.json\";\n      } else if (setup.isSplit) {\n        if (setup.isLeft) {\n          configName += \"_master_left_config.json\";\n        } else {\n          configName += \"_slave_right_config.json\";\n        }\n      } else {\n        configName += \"_config.json\";\n      }\n\n      const file = await fetch(`${configName}`);\n\n      if (!file.ok) {\n        console.error(\"failed to load file\");\n        notifyUpdateError(e.message);\n        return;\n      }\n\n      json = await file.json();\n\n      if (setup.isSplit) {\n        if (setup.useLpme) {\n          json.config.mode = \"SINGLE\";\n        } else {\n          if (setup.isSlave) {\n            json.config.mode = \"SPLIT_SLAVE\";\n          } else {\n            json.config.mode = \"SPLIT_MASTER\";\n          }\n        }\n      } else {\n        json.config.mode = \"SINGLE\";\n      }\n\n      json.config.matrix.debounce = setup.debounce;\n      json.config.matrix.is_left_hand = setup.isLeft ? 1 : 0;\n\n      json.config.peripheral.max_interval = setup.periphInterval;\n      json.config.peripheral.min_interval = setup.periphInterval;\n      json.config.peripheral.slave_latency = Math.floor(\n        500 / setup.periphInterval\n      );\n\n      json.config.central.max_interval = setup.centralInterval;\n      json.config.central.min_interval = setup.centralInterval;\n\n      json.config.keymap.locale = setup.isJis ? \"JP\" : \"US\";\n\n      if (!json.config.reserved) {\n        json.config.reserved = Array(8).fill(0);\n      }\n      json.config.reserved[2] = Math.floor(setup.autoSleep / 10);\n    } catch (e) {\n      console.error(e);\n      notifyUpdateError(e.message);\n      return;\n    }\n  }\n\n  if (serial.connected) {\n    try {\n      await serial.close();\n    } catch (e) {}\n  }\n\n  serialReceivedStr = \"\";\n  serial.setReceiveCallback((array) => {\n    let receivedPacket = String.fromCharCode.apply(null, array);\n    serialReceivedStr += receivedPacket;\n  });\n\n  try {\n    await serial.open();\n  } catch (e) {\n    console.error(e);\n    notifyUpdateError(e.message);\n    return;\n  }\n  serial.startReadLoop();\n\n  if (setup.uploaded) {\n    // send uploaded config\n    try {\n      await sendConfig(setup.uploaded);\n      notifyUpdateProgress(100);\n    } catch (e) {\n      console.error(e);\n      notifyUpdateError(e.message);\n    } finally {\n      await serial.close();\n    }\n    return;\n  }\n\n  try {\n    await sendConfig(JSON.stringify(json));\n    notifyUpdateProgress(100);\n  } catch (e) {\n    console.error(e);\n    notifyUpdateError(e.message);\n  } finally {\n    await serial.close();\n    return;\n  }\n});\nasync function sendConfig(configString) {\n  await serial.writeString(\"\\x03file config\\n\");\n\n  for (let index = 0; index < configString.length; index += 64) {\n    await serial.writeString(configString.slice(index, index + 64));\n    await sleep(30);\n    notifyUpdateProgress(Math.floor((index / configString.length) * 100));\n  }\n\n  await serial.writeString(\"\\0\");\n  await serial.writeString(\"\\nupdate 0\\n\");\n  await sleep(100);\n  if (\n    !serialReceivedStr.includes(\"Failed\") &&\n    serialReceivedStr.includes(\"Write succeed\")\n  ) {\n    return true;\n  } else {\n    return Promise.reject(new Error(\"Failed to Update\"));\n  }\n}\n"]}